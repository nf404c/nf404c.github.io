<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>This is my first blog</title>
    <url>/2020/04/09/This-is-my-first-blog/</url>
    <content><![CDATA[<h2 id="Hi-there-this-is-my-first-blog-post"><a href="#Hi-there-this-is-my-first-blog-post" class="headerlink" title="Hi there,this is my first blog post."></a>Hi there,this is my first blog post.</h2><h3 id="Congratulation-to-myself"><a href="#Congratulation-to-myself" class="headerlink" title="Congratulation to myself !"></a>Congratulation to myself !</h3><h4 id="That’s-all"><a href="#That’s-all" class="headerlink" title="That’s all."></a>That’s all.</h4><h5 id="See-you-next-time"><a href="#See-you-next-time" class="headerlink" title="See you next time~"></a>See you next time~</h5><p>This is a test file.</p>
<ul>
<li><p>By the way , markdown is really good to use.</p>
</li>
<li><p>I suggest you to try to use markdown and hope you enjoy it.</p>
</li>
<li><p>I love it!</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>从零开始，利用 Hexo 搭建个人博客（逐步详解）</title>
    <url>/2020/04/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%88%A9%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E9%80%90%E6%AD%A5%E8%AF%A6%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前情提要："><a href="#前情提要：" class="headerlink" title="前情提要："></a>前情提要：</h2><ul>
<li>本次搭建使用环境为 Windows 10 专业版 ，版本号为 1909 ，当前日期是 2020年4月9日 ，个人已经完全搭建完毕并且可以直接访问（只是界面比较简陋，需要以后慢慢完善）。</li>
<li>主要使用 cmd 控制台，<strong>注意</strong>：控制台需要<strong>以管理员身份运行</strong>，过程中会详细讲解。</li>
<li>如果在安装过程中出错/卡住，请尝试重来一遍（甚至几遍）当前操作，或将前面的操作逐一检查，或寻求百度（Google），相信你会找到答案的！</li>
<li>所需安装的程序/文件如下（百度都可以直接搜，不着急，这儿只是看一眼，后面有逐步详细介绍）：<ul>
<li>Node.js</li>
<li>git （ Win10 的小伙伴注意啦~记住这个东西，后面会提到！）</li>
</ul>
</li>
<li>推荐大家使用 Markdown 来做日常记录，我个人用来写笔记写稿子使用非常顺手。电脑上主要使用的一个软件叫 Typora ，现如今支持markdown格式编辑的软件有很多，个人觉得这个用起来最舒服顺手，看个人喜好吧~</li>
<li>文中在第六步中的第2小步编写markdown文件时我就是用的Typora，仅供参考。</li>
<li>文中在第七步中的第2小步修改文件使用的软件名为NotePad++，百度搜索即可安装，仅供参考。</li>
</ul>
<a id="more"></a>

<h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><h3 id="第一步：-进入cmd控制台"><a href="#第一步：-进入cmd控制台" class="headerlink" title="第一步： 进入cmd控制台"></a>第一步： 进入cmd控制台</h3><ol>
<li><p>win + r 键 打开 <strong>运行</strong> ，在里面输入 “cmd” （不要着急摁回车键）<img src="https://img-blog.csdnimg.cn/20200409225916166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>按住 Ctrl + Shift + Enter ，此时是以 <strong>管理员模式</strong> 打开 cmd 控制台，进入后会发现窗口左上角写着 “管理员：”<br><img src="https://img-blog.csdnimg.cn/20200409230201356.png" alt="在这里插入图片描述"></p>
</li>
<li><p>然后这一步先到这里，放着不用管了，我们进行下一步先</p>
</li>
</ol>
<h3 id="第二步：-安装-Node-js"><a href="#第二步：-安装-Node-js" class="headerlink" title="第二步： 安装 Node.js"></a>第二步： 安装 Node.js</h3><ol>
<li><p>首先打开百度（Google），搜索node.js，选择这个看起来就是官网的 node.js 官网<img src="https://img-blog.csdnimg.cn/20200409230237773.png" alt="在这里插入图片描述"></p>
</li>
<li><p>经过漫长的等待后我们见到的界面应该是这样的，如图所示，点击左侧按钮下载即可<img src="https://img-blog.csdnimg.cn/20200409230344576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>小提示：有可能出现加载不出来的情况，刷新或退了重进即可（加油，一定可以的）</p>
</li>
<li><p>下载过程略，完成后我们会得到这样一个东西，双击运行，开始安装</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200409230410483.png" alt="在这里插入图片描述"></p>
<ol start="4">
<li><p>安装过程：无脑next即可，没有特殊要求，到最后点击 Finish 退出即可，窗口会消失，不要害怕，已经装完了。</p>
</li>
<li><p>首先，以防万一我们先看一下是否真正的装完了，返回刚才的cmd控制台，输入引号内的内容 “node -v”还有一个 “npm -v” （不是连着输入啊）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>正常时会显示出版本号，像这样：</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200409230434672.png" alt="在这里插入图片描述"></p>
<h3 id="第三步：-安装-Hexo-博客框架"><a href="#第三步：-安装-Hexo-博客框架" class="headerlink" title="第三步： 安装 Hexo 博客框架"></a>第三步： 安装 Hexo 博客框架</h3><ol>
<li><p>首先，由于国内镜像源的速度较慢，所以我们先利用 npm 来安装一个淘宝的源，直接在刚才的控制台键入如下代码即可”npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org&quot;" target="_blank" rel="noopener">https://registry.npm.taobao.org&quot;</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>  <img src="https://img-blog.csdnimg.cn/20200409231040698.png" alt="在这里插入图片描述"></p>
<p>   此时等待进图条走完即可（只要网速足够快，你就看不到进度条(๑•̀ㅂ•́)و✧）</p>
<p>  <img src="https://img-blog.csdnimg.cn/2020040923133317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>   完成后整个页面长这个样子，<strong>如果出错</strong>建议检查前面的安装环节或者重新输入 npm install 那一行重新安装源</p>
<p>   最后，我们来键入 “cnpm -v” 来确认一下（此步骤非必须）如果差不多显示的是这样子，那么证明安装完成了</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200409231350364.png" alt="在这里插入图片描述"></p>
<ol start="2">
<li><p>利用 “cnpm install -g hexo-cli” 代码安装 hexo 框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200409231418174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>完成后大概长这个样子（因为我已经装过了，所以可能和新装的电脑有一点点不一样，安装速度和网速有关）</p>
<p>完成后利用 “hexo -v” 来检查是否安装成功，若成功，则会显示出版本号，如图（版本可能不一样，仅参考）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>   <img src="https://img-blog.csdnimg.cn/20200409231444475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<h3 id="第四步：-使用-Hexo-正式开始搭建博客"><a href="#第四步：-使用-Hexo-正式开始搭建博客" class="headerlink" title="第四步： 使用 Hexo 正式开始搭建博客"></a>第四步： 使用 Hexo 正式开始搭建博客</h3><ol>
<li><p>*<em>首先！先建一个空文件夹！记住这个路径！ *</em>（利用 mkdir 命令创建即可，我这里起了名叫 myblog）</p>
<p>这里我为了省事儿就不改路径了<br><img src="https://img-blog.csdnimg.cn/20200409231504848.png" alt="在这里插入图片描述"></p>
<p>接着，键入代码 “cd myblog”（cd 后接空格，在加上刚才你给文件夹取的名字），进入此文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd myblog</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>​<br> <img src="https://img-blog.csdnimg.cn/20200409231549694.png" alt="在这里插入图片描述"></p>
<p>   什么都没显示对不对？不要害怕，我们去电脑当中的相应路径就可以找到刚刚创建的这个文件夹了</p>
<p><img src="https://img-blog.csdnimg.cn/20200409231626149.png" alt="在这里插入图片描述"></p>
<p>   此处<strong>个人建议</strong>：右键选择固定到快速访问，这样以后再找的时候直接看左边的菜单就可以快速找到了<br>     <img src="https://img-blog.csdnimg.cn/20200409231637164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   ​    </p>
<ol start="2">
<li><p><strong>（注意，这一步耗时比较长，而且较为麻烦）</strong>扯远了，我们继续回到cmd控制台，刚才创建完文件夹后，继续利用代码生成 hexo 博客，键入代码 “hexo init”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><strong>注意！！！</strong> 这一步是最漫长的一步，等待的时间跨度最长可能达到半小时以上，持续时间与自身网络环境好坏挂钩</p>
<p><strong>这个时候，有些小伙伴的电脑会出错并提示关于 “git” 什么什么的</strong>（其实是具体显示啥名字我给忘了）</p>
<p>（如果期间没有提示并顺利完成的，请直接往下跳到第 5 小步继续查看后续教程）</p>
<p><strong>如果是这个原因安装失败，我们就要去百度搜索一下 “git”，依旧是选择这个长得很像官方网站但其实就是官方的官方网站的网站（你可以读下来的，我相信你），进去之后点击Download下载</strong></p>
</li>
</ol>
<p> <img src="https://img-blog.csdnimg.cn/20200409231734369.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200409231807138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>   下载过程略，完成后得到一个长这样的 .exe 文件，双击运行，然后安装。安装过程略，无脑点击 next (下一步)即可</p>
<p>  <img src="https://img-blog.csdnimg.cn/20200409231831929.png" alt="在这里插入图片描述"></p>
<ol start="3">
<li><p>安装完成后<strong>需要重新启动控制台</strong>，复习一下步骤（以管理员模式启动）</p>
<ul>
<li>先把现在的控制台关了</li>
<li>win + r </li>
<li>输入”cmd”</li>
<li>ctrl + shift + enter</li>
<li>完成，进入控制台</li>
</ul>
</li>
<li><p>这时，我们继续上一步用的代码 “cd myblog”，然后重新进行刚才提示出错的操作 “hexo init” ，如图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd myblog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/202004100003414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>      <strong>再次友情提示</strong> ：这一步骤需要等待的时间可能非常长，为了期中不发生意外（出错）请尽量让它自己跑着别动电脑，我们可以在旁边玩玩手机等等它。</p>
<p>   ​            实不相瞒，就这一步，我搞了三遍，等待期间我向大家展示一下我今天刚刚完成的（简陋的）博客主页：<a href="https://nf404c.github.io" target="_blank" rel="noopener">https://nf404c.github.io</a> (此句直接复制到浏览器粘贴即可打开），当然这也是我们最后最后最后做完的成果，大概就是这么个样子，初期只是一个非常简单的主页，更换主题等等需要后期的精力投入，慢慢来慢慢来</p>
<p>   ​        看到这里大概大家的电脑可能已经开始能看到前面类似是这样（如图）的加载项了，你可能以为它卡了，但其实它并没有，我们只需要 <strong>等</strong> ！给它一些时间，它会往下运行的，相信你的电脑，它，可以的。</p>
<p> <img src="https://img-blog.csdnimg.cn/20200409232251271.png" alt="在这里插入图片描述"></p>
<p>   ​        还有过程中我们可能会看到被黄色标记的 WARN 的字样（如图），暂时我还不知道会发生什么，不过看起来是没什么问题，我这里是没管它，继续等待即可。<br>    <img src="https://img-blog.csdnimg.cn/20200410000202582.png" alt="在这里插入图片描述"></p>
<h1 id="不知不觉间，二十分钟过去了"><a href="#不知不觉间，二十分钟过去了" class="headerlink" title="不知不觉间，二十分钟过去了"></a>不知不觉间，二十分钟过去了</h1><ol start="5">
<li><p>OK漫长的等待终于结束了，最终界面长这个样子（如图），最后一句我们可以看到 “Start blogging with Hexo!”，到这里，说明我们的博客已经创建完啦！</p>
<p>  <img src="https://img-blog.csdnimg.cn/20200409232312172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<h3 id="第五步：-启动！"><a href="#第五步：-启动！" class="headerlink" title="第五步： 启动！"></a>第五步： 启动！</h3><ol>
<li><p>接下来是启动博客，继续在控制台内输入 “hexo s”，之后会显示出一个地址，这便是刚才那个博客的一个本地的 localhost 的访问地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>​        此时，我们打开浏览器，在上方输入显示的地址 “localhost:4000” 即可访问刚刚创建的 Hexo 博客，具体界面长这个    样子（关于颜色问题，我这里是装了Chrome的扩展插件，所以网页背景都是黑色的，大家的应该都是白色的~颜色问题这里不用担心）</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200410000127608.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200410000050637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="第六步：-创建自己的第一个博客"><a href="#第六步：-创建自己的第一个博客" class="headerlink" title="第六步：  创建自己的第一个博客"></a>第六步：  创建自己的第一个博客</h3><ol>
<li><p>已创建好的博客中已经为我们自动新建了一个 “Hello World” 的示例文件和 “Quick Start” 一个快速上手的小教程</p>
<p>   这里告诉大家如何自己新建一个文件然后上传到博客中</p>
<pre><code>那么首先，我们回到控制台中</code></pre></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200410001646762.png" alt="在这里插入图片描述"><br>    这里提示，按 ctrl + c 键即可停止，我们根据要求按下快捷键后此进程结束，会出提示再次询问你是否终止 输入        （Y/N）（Y/y即代表 yes，N/n即代表no），这里我们输入 y，此时进程停止。</p>
<p><img src="https://img-blog.csdnimg.cn/20200410001259579.png" alt="在这里插入图片描述"><br>    <strong>注意</strong>： 这个时候如果想再进入博客界面（刷新）会无法访问。需要重新键入 “hexo s”，这里不重要，继续下一步。</p>
<ol start="2">
<li><p>在刚才的控制台中键入 hexo n “这个引号里面是你的文章名字”，我这里取名为 myfirstblog，回车键确认        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;myfirstblog&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200409232532730.png" alt="在这里插入图片描述"><br>​    此时，提示已经创建完毕，结果是一个 .md 格式的文件（即 markdown 格式文件），注意创建的路径，我们接下来要顺    着这个路径找到这个文件。</p>
<p><img src="https://img-blog.csdnimg.cn/20200409232545455.png" alt="在这里插入图片描述"></p>
<p>我这里选用 Typora来编辑这个 .md 文件，但是需要提前设置一下：（修改文件内容需要管理员权限）</p>
<ul>
<li><p>右键 Typora 程序（快捷方式）的图标，选择属性，然后选择兼容性，将下方 ”以管理员身份运行此程序“ 打勾，点击确认退出。</p>
<p>  <img src="https://img-blog.csdnimg.cn/20200409232719421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<p>然后双击打开刚才创建的 .md 结尾的文件，进行编辑即可，我这里简单的写了一个 hello </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为什么这个hello这么大呢，</span><br><span class="line">是因为我这里利用了 markdown 的语法</span><br><span class="line">在前面加 # 然后加个空格，再输入，这是一级标题</span><br><span class="line">## 两个#号加空格再输入，就是二级标题，以此类推，最多有六级标题</span><br><span class="line">还有诸多语法，有兴趣的可以自己去发掘噢~</span><br><span class="line">这里 Typora 我也是换了主题的，默认进去是白色的！</span><br><span class="line"> markdown 语法熟练之后敲起字来真的超爽啊~疯狂推荐</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2020040923273988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后保存退出即可，回到控制台界面，键入 “ hexo g “，生成。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>这一步会出好多东西，不过现在这些都不重要，我们会在里面发现我们刚刚创建的文件（myfirstblog）以及系统自带的一个文件（hello-world）</p>
<p><img src="https://img-blog.csdnimg.cn/20200409232755186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时，我们再次输入前面提到的本地localhost的访问方式，复习一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后再去浏览器输入显示的网址 localhost:4000 即可，打开后我们就可以发现，刚编辑过的文件已经显示在了博客主页上</p>
<p><img src="https://img-blog.csdnimg.cn/20200409232821287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>小提示</strong>：编辑时，请注意你的markdown格式，你的文件名就算是一级标题了，而我刚才只打了一个 # ，也算是一级标题，所以显示出来就在一起了（一样大，看出来木有）建议自己写的时候从二级标题开始，个人建议仅供参考。</p>
</li>
</ol>
<pre><code>到此处，利用 Hexo 搭建的博客基本就差不多了，但！还有最后一步。</code></pre><h3 id="第七步：-（最后一步）-利用-GitHub-码云-的接口实现博客的公开使用（别人也能访问）"><a href="#第七步：-（最后一步）-利用-GitHub-码云-的接口实现博客的公开使用（别人也能访问）" class="headerlink" title="第七步： （最后一步） 利用  GitHub  /  码云 的接口实现博客的公开使用（别人也能访问）"></a>第七步： （最后一步） 利用  GitHub  /  码云 的接口实现博客的公开使用（别人也能访问）</h3><ol>
<li><p>那么，首先我们先登录 GitHub （ 码云 这个平台方法和 GitHub 几乎一样，我就拿GitHub作例子了。别的平台我暂时不是很了解，有想法的可以自行研究，欢迎评论互动告知，提前感谢~）</p>
<p>登录之后界面右上角 加号 选择 新建一个仓库</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200409235230183.png" alt="在这里插入图片描述"></p>
<p>   仓库命名规则必须严格遵守，即 用户名字 + .github.io ，以我为例，我这里是已经提前创建了，所以提示错误，大家正常第一次创建的时候是不会提示错误的<br>   <img src="https://img-blog.csdnimg.cn/20200409235152460.png" alt="在这里插入图片描述"></p>
<p>   <strong>前面的用户名必须与左侧的名字相同</strong>，然后下方</p>
<p><img src="https://img-blog.csdnimg.cn/2020040923300027.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>   创建之后弹出界面，界面中上方会有一个框内写着 http开头的一个网址，<strong>复制下来这个网址</strong>，然后进行下一步</p>
<ol start="2">
<li><p>回到控制台，先 ctrl + c 把它终止了，然后需要在目录下部署一个插件，键入”cnpm install –save hexo-deployer-git”</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deplover-git</span><br></pre></td></tr></table></figure>

<p>   等待安装即可，最终结果如下图<br><img src="https://img-blog.csdnimg.cn/20200409233043397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25mNDA0Yw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>   个人踩坑：第一遍居然输错了，请各位一定注意拼写正确，deployer</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200409235055104.png" alt="在这里插入图片描述"></p>
<ol start="3">
<li><p>此时，去到创建的 myblog 目录下（名字如果取得和我不一样的自己找一找哈~都没关了吧？）</p>
<p>选中其中的 _config.yml 文件，右键用 Notepad++ 打开（个人习惯，仅供参考）</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/2020040923310983.png" alt="在这里插入图片描述"></p>
<p>   下拉到最下面，找到 deploy 开头的这一块</p>
<ul>
<li>第一行，type: 后面需要加一个空格，再键入 git </li>
<li>这个时候注意，有些人可能这一行上有俩单引号，就比如我，个人测试之后，把引号删了重新键入 git 和将 git 写到单引号内都可以完成最终程序（暂时未发现其他问题）最终我还是删掉了单引号，后期有问题再回来改</li>
<li>第二行，repo: 依旧是后面加一个空格，然后把刚才GitHub创建完仓库之后那个页面中间的地址粘贴到这一行</li>
<li>第三行，branch: master 如此键入即可</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200409233131356.png" alt="在这里插入图片描述"><br>   以我为例，如上图，然后<strong>保存退出</strong>此文件即可</p>
<p>   小提示：这里保存也会提示你需要管理员权限，根据提示重新以管理员身份启动Notepad++即可</p>
<ol start="4">
<li><p>继续回到控制台，键入 “hexo d” 完成部署</p>
<p>部署过程中，出现问题有几种可能（我记不全了，脑子不好，就想到这几个）</p>
<ul>
<li><p>报错，然后往回看提示你没有配置 git 的账号和邮箱</p>
<ul>
<li><p>解决办法：按照提示当中键入你的用户名就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;没记错的话有一行是长这样子的</span><br><span class="line">git config --global user.name &#39;在这个引号里面把你的用户名写上，我记得是和GitHub上的名字是一样的&#39;</span><br><span class="line">&#x2F;&#x2F;应该还要你输入一次邮箱，还是什么的，根据需求来，在控制台键入命令回车即可。</span><br><span class="line">引号是单引号还是双引号记不清了，反正写在引号里面</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>弹窗让你输入 GitHub 的账号和密码，输入即可</p>
</li>
<li><p>进程停止，依旧是提示让你输入GitHub的账号，输入即可，然后回车继续提示键入密码</p>
</li>
</ul>
</li>
<li><p>最后，显示一行特别长的以 Branch 开头的代码，大概长这个样子</p>
</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200409233213554.png" alt="在这里插入图片描述"></p>
<p>   这个时候就已经向GitHub推送完成啦，回网页刷新一下，会看到GitHub仓库内多了许多文件，这就是你博客的文件</p>
<h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><p>​    如何让其他人访问我们的这个博客网站呢？</p>
<p>​    其实很简单，还在GitHub的仓库界面没退吧？顶部网址栏里的最后一段，就是访问地址了</p>
<p><img src="https://img-blog.csdnimg.cn/20200409233230218.png" alt="在这里插入图片描述"></p>
<p>​    以我自己为例，我只要把 “nf404c.github.io” 这一段发给其他人，对方点击链接就可以访问我的博客了，当然我们也可以更细致一些，写标准一点，像这样</p>
<p>​        这是我的博客地址，大家来玩儿啊~    <a href="http://nf404c.github.io" target="_blank" rel="noopener">http://nf404c.github.io</a>  </p>
<p>​    效果可能会更棒噢(๑•̀ㅂ•́)و✧</p>
<p>​                                                                                                                    全篇结束，感谢收看。</p>
<h1 id="Hope-you-enjoy-this-see-you-next-time"><a href="#Hope-you-enjoy-this-see-you-next-time" class="headerlink" title="Hope you enjoy this,see you next time."></a>Hope you enjoy this,see you next time.</h1><h2 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h2><p>​    不是所有人都能一次按照流程完美的装下来，期间难免会出现报错或者其他的种种小问题，我没遇到巨多的问题，庆幸的同时也有一丝遗憾，要是能多遇上点儿问题说不定我还能找到更多的解决办法，这样这个教程就会更完整(๑•̀ㅂ•́)و✧</p>
<p>​    不管怎么说，可算是写完啦，希望您喜欢，更希望您看完这篇文章的同时也能拥有了自己的博客/主页，我们都要努力呀！</p>
<p>个人主页    欢迎访问 <a href="http://nf404c.github.io" target="_blank" rel="noopener">http://nf404c.github.io</a> （目前还比较简陋）</p>
<p>CSDN同步更新，欢迎访问收藏，任何意见建议欢迎评论区见，bye~</p>
]]></content>
  </entry>
  <entry>
    <title>Java前置基础</title>
    <url>/2020/04/11/Java%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="Java设计理念"><a href="#Java设计理念" class="headerlink" title="Java设计理念"></a>Java设计理念</h2><ul>
<li>Write Once Run Anywhere</li>
</ul>
<h2 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h2><ul>
<li><strong>JVM</strong> (Java Virtual Machine) <strong>虚拟机</strong>：<ul>
<li>使用软件在不同操作系统中，模拟相同的环境。</li>
</ul>
</li>
<li><strong>JRE</strong> (Java Runtime Environment) <strong>运行环境</strong>：<ul>
<li>包含JVM和解释器，完整的Java运行环境。</li>
</ul>
</li>
<li><strong>JDK</strong> (Java Development Kit) <strong>开发环境</strong>：<ul>
<li>包含JRE+类库+开发工具包（编译器+调试工具）。</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="Java概述与环境搭建"><a href="#Java概述与环境搭建" class="headerlink" title="Java概述与环境搭建"></a>Java概述与环境搭建</h2><ol>
<li><p>Java在1995年由 Sun Microsystems 推出的面向对象的编程语言</p>
</li>
<li><p>Java的特点是面向对象、简单、跨平台</p>
</li>
<li><p>Java的运行机制： 先编译，再解释</p>
</li>
<li><p>将源文件编译成字节码文件（.class），再交给不同平台进行解释执行（先编译再解释）</p>
</li>
<li><p>Java的环境搭建： 安装JDK、JRE、配置环境变量</p>
</li>
<li><p>第一个应用程序： 定义 .java 结尾的源文件，书写源代码，javac编译，java运行</p>
</li>
<li><p>Java语言的书写规范： 书写格式、代码规范、标识符命名</p>
</li>
<li><p>DOS命令 win+R进入cmd   c: 盘符名称加上冒号切换盘符   cd xxx进入文件夹  cd ..返回上一级  dir查看文件夹内容  exit 退出cmd   cls清除屏幕内容</p>
</li>
<li><p>开发步骤</p>
<ul>
<li>1.创建.java结尾的源文件</li>
<li>2.编写程序（class、main、逻辑代码）</li>
<li>3.编译：javac 文件名 .java （文件名.后缀名）</li>
<li>4.运行：java 类名（无后缀）</li>
</ul>
</li>
<li><p>同一个源文件中可以定义多个类</p>
<ul>
<li>编译后，每个类都会生成独立的 .class 文件。</li>
<li>一个类中，只能有一个主函数，每个类都可以有自己的主函数。</li>
<li>public 修饰的类称为公开类，要求类名必须与文件名称完全相同，包括大小写。</li>
<li>一个源文件中，只能有一个公开类。</li>
</ul>
</li>
<li><p>通过 package（包） 关键字在源文件的首行进行包的定义 （类似于文件夹，用于管理 .class 文件）</p>
<ul>
<li>带包编译： javac -d . xxx.java</li>
<li>带包运行： java xxx.xxx.xxxClass</li>
<li>经验： 域名倒置</li>
</ul>
</li>
<li><p>编码规范</p>
<ul>
<li>层级之间必须缩进（利用 Tab 键），一行只写一句</li>
<li>代码注释   (注释不参与编译)<ul>
<li>// 单行注释</li>
<li>/* 多行注释 */</li>
<li>/** 文档注释 */  （ 生成外部文档（外部说明书）：javadoc -d . HelloWorld.java )</li>
</ul>
</li>
<li>标识符命名 （Java程序中可自定义名称的都是标识符）<ul>
<li>语法规定<ul>
<li>可以由字母、数字、_、$ 组成，但不能以数字开头</li>
<li>不能与关键字、保留字重名</li>
</ul>
</li>
<li>约定俗成<ul>
<li>望文生义、见名知义</li>
<li>类名由一个或多个单词组成，每个单词首字母大写（pascal规范）</li>
<li>函数名、变量名由一个或多个单词组成，首单词首字母小写，拼接词首字母大写（camel）</li>
<li>包（package）名全小写，只可以实用特殊字符 “ . ”，并且不以 “ . “ 开头或结尾</li>
<li>常量全大写，多个单词用 “ _ “ 拼接(下划线)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java选择结构+局部变量</title>
    <url>/2020/04/11/Java%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84+%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ul>
<li>根据已知条件进行逻辑判断，满足条件后执行相关操作。</li>
</ul>
<h3 id="1-基本if选择结构"><a href="#1-基本if选择结构" class="headerlink" title="1. 基本if选择结构"></a>1. 基本if选择结构</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> （布尔表达式）&#123;<span class="comment">//检测布尔表达式是否true，若true则执行括号内代码块，若false则跳过执行后续代码</span></span><br><span class="line">	<span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br><span class="line">后续代码。。。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBasicIf</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//假设场景，Javak考试满分，奖励iPhone 11 Pro Max 512G</span></span><br><span class="line">        <span class="keyword">double</span> score = <span class="number">99</span>D;<span class="comment">// 99.0 两种方法表示</span></span><br><span class="line">        <span class="keyword">if</span> (score == <span class="number">100.0</span>)&#123;</span><br><span class="line">        	<span class="comment">//执行if的逻辑代码块</span></span><br><span class="line">            System.out.println(<span class="string">"恭喜获得满分，奖励iPhone 11 Pro Max 512G"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//常规代码</span></span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程：</p>
<ul>
<li>对布尔表达式进行判断。</li>
<li>结果为true，则先执行代码块，再执行后续代码。</li>
<li>结果为false，则跳过代码块，直接执行后续代码。</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="2-if-else-选择结构"><a href="#2-if-else-选择结构" class="headerlink" title="2. if else 选择结构"></a>2. if else 选择结构</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> （布尔表达式）&#123;<span class="comment">//检测布尔表达式是否true，若true则执行代码块1，若false则执行代码块2，然后执行后续代码</span></span><br><span class="line">	<span class="comment">//代码块1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//代码块2</span></span><br><span class="line">&#125;</span><br><span class="line">后续代码。。。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIfElse</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//假设场景，Java考试成绩，如果满分，奖励iPhone,否则 下次努力</span></span><br><span class="line">        <span class="keyword">double</span> score = <span class="number">99</span>D;<span class="comment">// 99.0</span></span><br><span class="line">        <span class="keyword">if</span>(score == <span class="number">100.0</span>)&#123;</span><br><span class="line">        	System.out.println(<span class="string">"奖励iPhone"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        	System.out.println(<span class="string">"下次努力"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程：</p>
<ul>
<li>对布尔表达式进行判断。</li>
<li>结果为true，则先执行代码块1，再退出整个结构，执行后续代码。</li>
<li>结果为false，则先执行代码块2，再退出整个结构，执行后续代码。</li>
</ul>
</li>
</ul>
<!--more-->

<h3 id="3-多重if选择机构"><a href="#3-多重if选择机构" class="headerlink" title="3. 多重if选择机构"></a>3. 多重if选择机构</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//代码块1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（布尔表达式<span class="number">2</span>）&#123;</span><br><span class="line">    <span class="comment">//代码块2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（布尔表达式<span class="number">3</span>）&#123;      <span class="comment">// else if 不限次数</span></span><br><span class="line">    <span class="comment">//代码块3</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//代码块4</span></span><br><span class="line">&#125;</span><br><span class="line">后续代码。。。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMultiIf</span></span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      	<span class="comment">//假设场景，汽车销售推荐</span></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          	如果预算是 500 万，宾利</span></span><br><span class="line"><span class="comment">          	否则，如果预算在 300 万，奔驰 G63 AMG</span></span><br><span class="line"><span class="comment">          	否则，如果预算是 100 万，宝马 X6</span></span><br><span class="line"><span class="comment">          	否则，如果预算是 50 万，奥迪 A6L</span></span><br><span class="line"><span class="comment">        	否则，如果预算是 20 万，帕萨特</span></span><br><span class="line"><span class="comment">          	否则，如果预算是 10 万，宝来</span></span><br><span class="line"><span class="comment">          	否则，如果预算是 5 万，五菱宏光 S</span></span><br><span class="line"><span class="comment">          	否则，如果预算是 1 万，小鸟电动车</span></span><br><span class="line"><span class="comment">          	否则，捷安特（else）</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="keyword">int</span> money = xxx; <span class="comment">//单位：万</span></span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> (money &gt;= <span class="number">500</span>)&#123;</span><br><span class="line">              System.out.println(<span class="string">"宾利"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">300</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"奔驰 G63 AMG"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"宝马 X6"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">50</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"奥迪 A6L"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">20</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"帕萨特"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"宝来"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">5</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"五菱宏光 S"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(money &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">          	System.out.println(<span class="string">"小鸟电动车"</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          	System.out.println(<span class="string">"捷安特"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>执行流程：</p>
<ul>
<li>表达式1为true，则执行代码块1，再退出整个结构执行后续代码。</li>
<li>表达式2为true，则执行代码块2，再退出整个结构执行后续代码。</li>
<li>表达式3为true，则执行代码块3，再退出整个结构执行后续代码。</li>
<li>以上均为false，则执行代码块4，再退出整个结构执行后续代码。</li>
<li><strong>注意</strong>： 相互排斥，有一个为 true 则其他均不再执行，适用于 <strong>区间判断</strong>（<strong>注意遵循 从大到小 / 从小到大 顺序，否则出现 逻辑错误 ，结果与预期不相同</strong>）。</li>
</ul>
</li>
</ul>
<!--more-->

<h3 id="4-嵌套if选择结构"><a href="#4-嵌套if选择结构" class="headerlink" title="4. 嵌套if选择结构"></a>4. 嵌套if选择结构</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> （外层表达式）&#123;</span><br><span class="line">	<span class="keyword">if</span> （内层表达式）&#123;</span><br><span class="line">    	<span class="comment">//内层代码块1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	<span class="comment">//内层代码块2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//外层代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNestedIf</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//假设场景 百米赛跑 13s 及格</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计时器</span></span><br><span class="line">        <span class="keyword">double</span> timer = <span class="number">12</span>;</span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        <span class="keyword">char</span> sex = <span class="string">'男'</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (timer &lt;= <span class="number">13</span>)&#123;</span><br><span class="line">        	<span class="comment">//具备进入决赛的资格</span></span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="string">'男'</span>)&#123;</span><br><span class="line">            	System.out.println(<span class="string">"进入男子组决赛"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            	System.out.println(<span class="string">"进入女子组决赛"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        	System.out.println(<span class="string">"淘汰"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程：</p>
<ul>
<li>当外层条件满足时，再判断内层条件。</li>
<li><strong>注意</strong>： <strong>1.</strong> 一个选择结构中，可以嵌套另一个选择结构。<strong>2.</strong> 嵌套格式正确的情况下，支持任意组合。</li>
</ul>
</li>
</ul>
<!--more-->

<h2 id="5-分支结构-switch"><a href="#5-分支结构-switch" class="headerlink" title="5. 分支结构 switch"></a>5. 分支结构 switch</h2><ul>
<li><p>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (变量/表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        逻辑代码<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        逻辑代码<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> 值n:</span><br><span class="line">        逻辑代码n;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        未满足时的逻辑代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSwitch</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//假设场景，一周菜谱</span></span><br><span class="line">        <span class="keyword">int</span> weekDay = <span class="number">7</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span>(weekDay)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"牛肉面"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"炸酱面"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"麻辣香锅"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">"大盘鸡"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"烤冷面"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">"手抓饼"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">"海底捞"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"录入有误，请输入1-7之间的有效数字"</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可判断类型：</p>
<ul>
<li>byte、short、int、char、String（JDK7+）</li>
</ul>
</li>
<li><p>执行流程：</p>
<ul>
<li><p>如果变量中的值等于值1，则执行逻辑代码1。</p>
</li>
<li><p>如果变量中的值等于值2，则执行逻辑代码2。</p>
</li>
<li><p>如果变量中的值等于值3，则执行逻辑代码3。</p>
</li>
<li><p>如果变量中的值没有匹配的 case 值时，执行 default 中的逻辑代码。</p>
</li>
<li><p><strong>注意： 所有 case 的取值不可相同</strong></p>
</li>
<li><p>当匹配的 case 被执行后，并不会自动退出整个结构，而是继续向下执行。</p>
</li>
<li><p><strong>break 关键字可以在匹配的 case 执行后，直接跳出整个结构。</strong></p>
</li>
<li><p>switch 语句内<strong>不限制顺序</strong>，<strong>建议在 default 句后也加入 break 跳出</strong></p>
</li>
<li><p><strong>可适当利用不自动跳出特性，代码冗余</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>;</span><br><span class="line">	System.out.println(<span class="string">"炸酱面"</span>);<span class="comment">//逻辑贯穿，2、3、4 输出同样值</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>switch 代码可读性强，适用 <strong>等值判断</strong>（举例：菜单选择）</p>
</li>
</ul>
</li>
</ul>
<!--more-->

<h1 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h1><ul>
<li><p>概念： 声明在函数内部的变量，必须先赋值再使用。</p>
</li>
<li><p>作用范围： 定义行开始到所在的代码块结束。</p>
</li>
<li><p>注意： 多个变量，在重合的作用范围内，不可出现重名（命名冲突）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLocalVariables</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量</span></span><br><span class="line">        System.out.println(a);<span class="comment">//输出为 10</span></span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//int a = 20;//重名的局部变量</span></span><br><span class="line">          <span class="comment">//System.out.println(a);</span></span><br><span class="line">        	<span class="keyword">int</span> b = <span class="number">20</span>;<span class="comment">//局部变量，这个b仅在此if结构下可用</span></span><br><span class="line">            System.out.println(b);<span class="comment">//打印结果为 20</span></span><br><span class="line">        &#125;<span class="comment">//代码块结束，b变量回收</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">30</span>;<span class="comment">//新变量赋值                  不建议定义相同名字的变量，重新定义新变量名</span></span><br><span class="line">        System.out.println(b);<span class="comment">//输出结果为30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<!--more-->

<h1 id="总结（选择结构-局部变量）"><a href="#总结（选择结构-局部变量）" class="headerlink" title="总结（选择结构+局部变量）"></a><strong>总结</strong>（选择结构+局部变量）</h1><ol>
<li>基本 if 选择结构：<ul>
<li>if  ( ) { }</li>
</ul>
</li>
<li>if else 选择结构：<ul>
<li>if ( ) else { }</li>
</ul>
</li>
<li>多重 if 选择结构：<ul>
<li>if ( ) { } else if ( ) { } else if ( ) { } else { }</li>
</ul>
</li>
<li>嵌套 if 选择结构：<ul>
<li>if ( ) { if ( ) { } } </li>
</ul>
</li>
<li>switch 分支结构：<ul>
<li>switch ( ) { }</li>
</ul>
</li>
<li>局部变量：<ul>
<li>声明在函数内部的变量，必须先赋值再使用。</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java基础篇</title>
    <url>/2020/04/11/Java%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><ol>
<li>什么是<strong>内存</strong>？</li>
</ol>
<ul>
<li>内存是瞬时状态下的存储空间，造价高、工业上的设计瓶颈</li>
</ul>
</li>
<li><ol start="2">
<li>Java 虚拟机（Java程序）默认分配到的物理内存是 电脑内存的 1/8 .（32*1/8=4）</li>
</ol>
</li>
<li><ol start="3">
<li><strong>bit（位）</strong>-&gt; <strong>Byte（字节）</strong> -&gt; KB -&gt; MB -&gt; GB -&gt; TB -&gt; PB -&gt; EB -&gt; ZB -&gt; YB -&gt; BB -&gt; NB -&gt; DB -&gt; CB -&gt; XB         8 bit = 1 Byte     剩下的都是 1024 进位</li>
</ol>
</li>
</ul>
<a id="more"></a>

<h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><ul>
<li><p>概念：计算机内存中的一块存储空间，是存储数据的基本单元。</p>
</li>
<li><p>组成：数据类型+变量名+值</p>
</li>
<li><p>定义流程：</p>
<ul>
<li><ol>
<li><p>声明：</p>
<p>​    数据类型 变量名：</p>
</li>
</ol>
</li>
<li><ol start="2">
<li><p>赋值：</p>
<p>​    变量名 = 值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVariables</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//1.声明变量</span></span><br><span class="line">        <span class="keyword">int</span> money; <span class="comment">//在内存中开辟了一块整数存储空间，名称为money</span></span><br><span class="line">        <span class="comment">//2.赋值</span></span><br><span class="line">        money = <span class="number">1000</span>; <span class="comment">//将1000这个值存储（赋值）到money这个空间中（变量）</span></span><br><span class="line">        System.out.print(money);<span class="comment">//此处打印的不是文本，不能加双引号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><pre><code class="java">System.out.print(xxx);<span class="comment">//输出后不换行，保持在同一行输出</span>
System.out.println(xxx);<span class="comment">//Print Line 输出后换行，print后加 ln</span>
&lt;!--￼<span class="number">1</span>--&gt;</code></pre>
</li>
<li><p>声明并赋值：【常用】</p>
<p>​    数据类型 变量名 = 值；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;<span class="comment">//声明并赋值</span></span><br><span class="line">System.out.println(age);</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时声明多个同类型变量：【不常用，可读性差，仅作了解】</p>
<p>​    数据类型 变量名1，变量名2，变量名3 = 值；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,c=<span class="number">100</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">50</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure>
<!--more-->


</li>
</ul>
</li>
</ul>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h2><ul>
<li><p>Java中的变量具有严格的数据类型区分。（强类型语言）</p>
</li>
<li><p>在Java语言中，任何一个值，都有其对应类型的变量。</p>
</li>
<li><p><strong>基本数据类型</strong>：</p>
<ul>
<li><p>整数      第一位为符号位，0为正，1为负</p>
<ul>
<li><p>二进制       （1字节）<strong>byte</strong> == 8bit          0000 0000            -2^7<del>2^7-1     -128</del>127</p>
<ul>
<li>例如    十进制1    二进制 0000 0001</li>
</ul>
</li>
<li><p>十六进制    （2字节）<strong>short</strong>    0000 0000 0000 0000     -2^15<del>2^15-1   -32768</del>32767</p>
</li>
<li><p>三十二进制 （4字节） <strong>int</strong>       -2^31<del>2^31-1      -2147483648</del>2147483647</p>
</li>
<li><p>六十四进制 （8字节）<strong>long</strong>      -2^63~2^63-1            </p>
<p>​                                                     -9223372036854775808~9223372036854775807</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestType</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">byte</span> b = <span class="number">128</span>;<span class="comment">//超出最大值127，会有损失，出错</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">32767</span>;<span class="comment">//最大值32767，可以通过</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2147483648</span>;<span class="comment">//超出最大值，出错（int最大值2147483647）</span></span><br><span class="line">        <span class="keyword">long</span> a = <span class="number">21477483647</span>;<span class="comment">//通过</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">2147483648</span>;<span class="comment">//依旧出错，因为整数默认的数据类型是int</span></span><br><span class="line">        <span class="comment">//此时若要为long类型赋值，应将值后面加上L（不超过int范围内不需要加）</span></span><br><span class="line">        <span class="keyword">long</span> x = <span class="number">2147483648L</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>扩展：</p>
<ul>
<li>程序运行过程中，瞬时空间（局部变量表 -Slot 槽）<ul>
<li>可存储byte、short、int、float、char、boolean……reference（对象），此处不包含double和long，单槽数据过大会分开捆绑存储（最大32位）</li>
<li>平常用int即可</li>
</ul>
</li>
</ul>
</li>
<li><p>小数（浮点数）</p>
<ul>
<li><p><strong>float</strong> （4字节）单精度（精度相对低一些） </p>
</li>
<li><p><strong>double</strong> （8字节）双精度（精度相对高一些）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">12.34</span>;</span><br><span class="line"><span class="keyword">float</span> e = -<span class="number">34.56F</span>;<span class="comment">//一样</span></span><br><span class="line">System.out.println(d);<span class="comment">//输出结果为 12.34</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浮点型数值采用科学计数法表示：</p>
<ul>
<li>2E3 等价于 2*10^3 （结果： 2000.0）</li>
<li>3E5 等价于 3*10^5 （结果： 300000.0）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">2E4</span>;</span><br><span class="line"><span class="keyword">float</span> e = <span class="number">2E4F</span>;<span class="comment">//一样</span></span><br><span class="line">System.out.println(d); <span class="comment">//输出结果为 20000.0</span></span><br><span class="line"><span class="keyword">double</span> e = <span class="number">2E-1</span>;<span class="comment">//输出结果为 0.2  ( 10^-1 )</span></span><br><span class="line"></span><br><span class="line">System.out.println(Float.MAX_VALUE); <span class="comment">//查看最大值(同理可替换整数）无负数</span></span><br><span class="line">System.out.println(Byte.MIN_VALUE);<span class="comment">//查看最小值（同理可替换）无负数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意</strong>：double为浮点数的默认类型，如需为float类型赋值，需在值后面加 F（或 f ）</p>
</li>
<li><p>额外知识储备：float 32bit 1bit 符号位  8bits 指数位  23bits 尾数位</p>
<p>​                         double 64bit 1bit 符号位  11bits 指数位  52bits尾数位</p>
</li>
</ul>
</li>
<li><p>布尔（boolean）</p>
<ul>
<li><p><strong>boolean</strong> （1字节）true/false  仅可描述“真”或“假”</p>
<ul>
<li><p>可直接赋值 true / false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> answer = <span class="keyword">false</span>;</span><br><span class="line">System.out.println(answer);<span class="comment">//输出为 false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可赋值一个结果为 true / false 的表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> result = <span class="number">3</span> &gt; <span class="number">2</span>;</span><br><span class="line">System.out.println(result);<span class="comment">//输出为 true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意，Java中的boolean不能参与算术运算</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>字符（char）  全称：character</p>
<ul>
<li><p><strong>char</strong> （2字节）表示一个字符     </p>
</li>
<li><p>英文对应<strong>ASCII码表</strong> 中文或其他对应<strong>Unicode字符集（万国码）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'B'</span>;</span><br><span class="line"><span class="keyword">char</span> c3 = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = <span class="string">'好'</span>;</span><br><span class="line"><span class="keyword">char</span> c5 = <span class="string">'\u0041'</span>;<span class="comment">//通过十六进制数41在字符集中所对应的字符赋值</span></span><br><span class="line">System.out.println(c1);<span class="comment">//输出为 A</span></span><br><span class="line">System.out.println(c2);<span class="comment">//输出为 B</span></span><br><span class="line">System.out.println(c3);<span class="comment">//输出为 A</span></span><br><span class="line">System.out.println(c4);<span class="comment">//输出为 好</span></span><br><span class="line">System.out.println((<span class="keyword">int</span>)c4);<span class="comment">//输出为22909，为“好”字的 Unicode码，用int查看</span></span><br><span class="line">System.out.println(c5);<span class="comment">//输出为 A</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值：char c1 = ‘A’; 或者 char c2 = 65; 或者 char c3 = ‘\u0041’;</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>引用数据类型</strong></p>
<ul>
<li><p>字符串 <strong>String</strong>    任何 “ “ 之间的字面值    Unicode字符序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"你好"</span>;</span><br><span class="line">String str2 = <span class="string">"Hello"</span>;</span><br><span class="line">String str3 = <span class="string">"分布式架构师"</span>;</span><br><span class="line">String str4 = <span class="string">"Java Engineer"</span>;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<p>扩展：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	<span class="comment">//short 2Byte 16bit 有符号数	-2^15 ~ 2^15-1		-32768 ~ 32767</span></span><br><span class="line">	<span class="comment">//char  2Byte 16bit 无符号数	0 ~ 2^16-1			0 ~ 65535</span></span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">char</span> c = s;<span class="comment">//此条错误，编译不通过，怀疑 s 可能是负数</span></span><br><span class="line">    <span class="keyword">char</span> c = (<span class="keyword">char</span>)s;<span class="comment">//此条通过</span></span><br><span class="line">    System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!--more-->

<h2 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3. 类型转换"></a>3. 类型转换</h2><ul>
<li><p>自动类型转换</p>
<ul>
<li><p>两种类型相互兼容</p>
</li>
<li><p>目标类型<strong>大于</strong>源类型</p>
</li>
<li><pre><code class="java"><span class="keyword">short</span> s = <span class="number">123</span>;
<span class="keyword">int</span> i = s;<span class="comment">//自动转换成功，编译通过 目标类型大于源类型</span>
System.out.println(i);<span class="comment">//输出结果 123</span>
<span class="keyword">double</span> d = i;
System.out.println(d);<span class="comment">//通过，输出结果 123.0</span>
&lt;!--￼<span class="number">12</span>--&gt;</code></pre>
</li>
<li><p>强制类型转换规则</p>
<ul>
<li><p>整数长度足够，数据完整。 </p>
</li>
<li><pre><code class="java"><span class="keyword">int</span> i = <span class="number">100</span>;
<span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;<span class="comment">//b = 100</span>
&lt;!--￼<span class="number">13</span>--&gt;</code></pre>
</li>
<li><p>小数强转整数，数据截断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">2.5</span>;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)d;<span class="comment">//i = 2 （小数位舍掉）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符整数互转，数据完整。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">int</span> i = c;<span class="comment">//i = 65</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>boolean 的取值为 true/false ，不可与其他类型转换</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>表达式</p>
<ul>
<li><p>使用运算符连接的变量或字面值，并可以得到一个最终结果</p>
</li>
<li><pre><code class="java"><span class="number">1</span> + <span class="number">2</span>;
<span class="keyword">int</span> a = <span class="number">3</span>;    a-<span class="number">2</span>;
&lt;!--￼<span class="number">16</span>--&gt;

* 特殊：任何类型与 String （字符串）相加（+）时，实为拼接，其结果自动提升为 String 。

  &lt;!--￼<span class="number">17</span>--&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<!--more-->

<h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h2><ul>
<li><p>运算符 </p>
<ul>
<li><p>加 +   减 -   乘 *   除 /   取余 %   自增 ++   自减 –   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">        System.out.println(a / b);</span><br><span class="line">        System.out.println(a % b);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//c++;//独立一行书写（永远代表+1）自占一行</span></span><br><span class="line">        ++c;<span class="comment">//独立一行书写（永远代表+1）自占一行</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//System.out.println(++d);//加号在前面，高优先级，先+再输出，结果为 11</span></span><br><span class="line">        System.out.println(d++);<span class="comment">//加号在后面，低优先级，先输出结果10,再 +1</span></span><br><span class="line">        System.out.println(d);<span class="comment">//接上一行，此时输出结果为 11</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> e = b++;</span><br><span class="line">        <span class="comment">//int e = ++b;//此时 e 和 b 都为 4 ，b 先自增再赋值给e</span></span><br><span class="line">        System.out.println(e);<span class="comment">//此时 e 为 3 ，b 为 4（先赋值之后 b 再自增）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>赋值运算符：</p>
<ul>
<li><p>“ = ” 直接赋值</p>
</li>
<li><p>“ += ” 求和后赋值</p>
</li>
<li><p>“ -= ” 求差后赋值</p>
</li>
<li><p>“ *= ” 求积后赋值</p>
</li>
<li><p>“ /= ” 求商后赋值</p>
</li>
<li><p>“ %= ” 求余后赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">num1 += <span class="number">5</span>;<span class="comment">//num1 = num1 +5   其他原理相同</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>关系运算符：   两个操作数进行比较</p>
<ul>
<li><p>“ &gt; “ 大于</p>
</li>
<li><p>“ &lt; “ 小于</p>
</li>
<li><p>“ &gt;= “ 大于等于</p>
</li>
<li><p>“ &gt;= “ 小于等于</p>
</li>
<li><p>“ == “ 等于</p>
</li>
<li><p>“ != “ 不等于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> &gt;= <span class="number">2</span>);<span class="comment">//输出结果 true</span></span><br><span class="line">System.out.println(<span class="number">5</span> == <span class="number">2</span>);<span class="comment">//输出结果 false</span></span><br><span class="line">System.out.println(<span class="number">5</span> != <span class="number">2</span>);<span class="comment">//输出结果 true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>逻辑运算符：   两个boolean类型的操作数或表达式进行逻辑比较</p>
<ul>
<li><p>“ &amp;&amp; “ 与（并且）  两个表达式，同时为真，结果为真</p>
</li>
<li><p>“ || “ 或（或者）  两个表达式，有一个为真，结果为真</p>
</li>
<li><p>“ ! “ 非（取反）  意为“不是”，真即是假，假即是真</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> javaSeScore = <span class="number">98.5</span>;</span><br><span class="line"><span class="keyword">double</span> javaEeScore = <span class="number">100.0</span>;<span class="comment">//     分别与100进行比较，达到100即合格</span></span><br><span class="line">System.out.println( javaSeScore == <span class="number">100</span> &amp;&amp; javaEeScore == <span class="number">100.0</span>)<span class="comment">//输出结果为 false</span></span><br><span class="line">System.out.println( javaSeScore == <span class="number">100</span> || javaEeScore == <span class="number">100.0</span>)<span class="comment">//输出结果为 true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//num 中的值是否为5的倍数？，是 即为 true   是5的倍数</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">System.out.println( num % <span class="number">5</span> == <span class="number">0</span> );<span class="comment">//输出为 true</span></span><br><span class="line"><span class="comment">//num 中的值应该不是5的倍数吧？   false   代表了5的倍数</span></span><br><span class="line">System.out.println( !(num % <span class="number">5</span> == <span class="number">0</span>) );<span class="comment">//输出为 false （前方取反）</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>三元运算符：  将判断后的结果赋值给变量</p>
<ul>
<li><p>“ ? : “ 布尔表达式?结果1：结果2        当表达式结果为真，获得结果1，当表达式结果为假，获得结果2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">///String tag = "生日快乐" / "继续等待"</span></span><br><span class="line"><span class="comment">//String tag = 布尔表达式 ？ 结果为真时需要赋予的值 ： 结果为假时需要赋予的值</span></span><br><span class="line"><span class="keyword">int</span> day = <span class="number">28</span>;</span><br><span class="line">String tag = day == <span class="number">28</span> ? <span class="string">"生日快乐"</span> : <span class="string">"继续等待"</span>;</span><br><span class="line">System.out.println(tag);<span class="comment">//输出为 生日快乐  若上面int不为28，则输出另一个 继续等待</span></span><br><span class="line"><span class="comment">//需要赋予的值应与前方 变量类型 类型相同</span></span><br><span class="line"><span class="comment">//此处用 String 类型作例子（字符串）</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<!--more-->

<h2 id="6-控制台输入"><a href="#6-控制台输入" class="headerlink" title="6. 控制台输入"></a>6. 控制台输入</h2><ul>
<li><p>控制台输入：  程序运行中，可在控制台（终端）手动录入数据，再让程序执行</p>
<ul>
<li><p>语法：  import 包名.类名.;//将外部class文件功能引入到自身文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义包：明确该文件的 .class 文件的目录结构</span></span><br><span class="line"><span class="keyword">package</span> p1;</span><br><span class="line"><span class="comment">//1.引入包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//另一种方法 java.util.*;  *代表所有包，省事儿</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScanner</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="comment">//2.创建 Scanner 类型的变量，并赋值</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"请输入内容："</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Scanner类中对应的函数</span></span><br><span class="line">        <span class="comment">// .nextInt();//获取整数</span></span><br><span class="line">        <span class="comment">// .nextDouble();//获取小数</span></span><br><span class="line">        <span class="comment">// .next();//获取字符串</span></span><br><span class="line">        <span class="comment">// .next().charAt(0);//获取单个字符</span></span><br><span class="line">        <span class="comment">/// 若输入了不匹配的字符，则会产生 java.util.InputMismatchException</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> num = input.nextInt();<span class="comment">//表示 将控制台获取到的一个整数值，赋值给 num 变量</span></span><br><span class="line">        <span class="keyword">double</span> num = input.nextDouble();<span class="comment">//获取小数值赋值给num变量</span></span><br><span class="line">        String num = input.next();<span class="comment">//接收字符串</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> num = input.next().charAt(<span class="number">0</span>);<span class="comment">//接收首个字符（单个字符）</span></span><br><span class="line">        <span class="keyword">char</span> num = input.next().charAt(<span class="number">1</span>);<span class="comment">//接收第二个字符，往后依此类推</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"您输入的值为："</span> + num );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<!--more-->

<h2 id="总结（变量-数据类型-类型转换-类型提升-运算符-控制台录入）"><a href="#总结（变量-数据类型-类型转换-类型提升-运算符-控制台录入）" class="headerlink" title="总结（变量+数据类型+类型转换+类型提升+运算符+控制台录入）"></a><strong>总结</strong>（变量+数据类型+类型转换+类型提升+运算符+控制台录入）</h2><ul>
<li><strong>变量</strong><ul>
<li>计算机内存中的一块存储空间，是存储数据的基本单元。</li>
</ul>
</li>
<li><strong>数据类型</strong>：<ul>
<li>基本数据类型（byte、short、int、long、float、double、boolean、char 8种）</li>
<li>引用数据类型（String、数组、对象）（数组和对象在以后会学到）</li>
</ul>
</li>
<li><strong>类型转换</strong>：<ul>
<li>自动类型转换、强制类型转换</li>
</ul>
</li>
<li><strong>类型提升</strong>：<ul>
<li>数字间的常规类型提升，字符串的特殊类型提升（String）</li>
</ul>
</li>
<li><strong>运算符</strong>：<ul>
<li>算术运算符、赋值运算符、关系运算符、逻辑运算符、三元运算符</li>
</ul>
</li>
<li><strong>控制台录入</strong>：<ul>
<li>引入工具包、声明Scanner、调用对应函数接收控制台录入数据</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>循环结构</title>
    <url>/2020/04/13/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul>
<li>概念： 通过某个条件，重复的执行一段逻辑代码。</li>
</ul>
<a id="more"></a>

<h3 id="1-while-循环"><a href="#1-while-循环" class="headerlink" title="1. while 循环"></a>1. while 循环</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> （布尔表达式）&#123;</span><br><span class="line">	<span class="comment">//逻辑代码（循环操作）</span></span><br><span class="line">&#125;</span><br><span class="line">后续代码。。。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWhile</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//1. 初始部分</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        while (i &lt;= 10)&#123;</span></span><br><span class="line"><span class="comment">        	System.out.println("HelloWorld");//死循环</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)&#123;<span class="comment">// 2. 循环条件</span></span><br><span class="line">        	System.out.println(<span class="string">"HelloWorld"</span>);<span class="comment">// 3. 循环操作</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//通过自增达到需求上限，结束循环并完成后续代码</span></span><br><span class="line">            i++;<span class="comment">// 4. 迭代部分（增量）</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程：</p>
<ul>
<li>先对布尔表达式进行判断，结果为 true ，则执行逻辑代码。</li>
<li>本次执行完毕后，再次进行判断，结果仍旧为true，则再次执行逻辑代码。</li>
<li>直至布尔表达式的结果为false时，才会退出循环结构，执行后续代码。</li>
</ul>
</li>
<li><p><strong>循环的组成</strong>：   四个部分组成</p>
<ul>
<li><ol>
<li><strong>初始部分</strong>：用以判断的变量</li>
<li><strong>循环条件</strong>：决定是否继续循环的依据</li>
<li><strong>循环操作</strong>：单次执行的逻辑代码或任务</li>
<li><strong>迭代部分</strong>：控制循环条件改变的增量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalcSum</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> i = <span class="number">1</span>;<span class="comment">//从1开始</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        	sum = sum + i;<span class="comment">//sum += i</span></span><br><span class="line">            i++;<span class="comment">//自增1</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最终结果为"</span> + sum);<span class="comment">//经典循环（求和0-100）案例，最终结果为5050</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>while 特点</p>
<ul>
<li>首次判断不满足，则一次都不会执行。（执行次数 0~n 次）</li>
<li><strong>特点：</strong>首次即有入口条件，<strong>先判断、再执行</strong>，适用于<strong>循环次数明确</strong>的情况。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if ( i % 2 == 0)&#123;  // 0-100偶数和</span></span><br><span class="line"><span class="comment">                sum += i ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if ( i % 2 != 0)&#123;  // 0-100奇数和</span></span><br><span class="line"><span class="comment">                sum += i ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if ( i % 3 == 0)&#123;  // 0-100 3的倍数和</span></span><br><span class="line"><span class="comment">                sum += i ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> ( i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> != <span class="number">0</span>)&#123;  <span class="comment">// 0-100 是3的倍数不是5的倍数的数字之和</span></span><br><span class="line">                sum += i ;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"程序结束，结果为："</span> + sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="comment">//以此类推，延续思想</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="2-do-while-循环"><a href="#2-do-while-循环" class="headerlink" title="2. do while 循环"></a>2. do while 循环</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	逻辑代码（循环操作）</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//使用控制台录入 记得导入包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDoWhile</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 声明Scanner</span></span><br><span class="line">    	<span class="comment">//假设场景，Tom同学完成作业，如果完成的不好，则重写。如果完成的好，则结束。</span></span><br><span class="line">        <span class="keyword">char</span> answer;<span class="comment">// 初始部分</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"抄写一遍：好好学习，天天向上"</span>);<span class="comment">// 循环操作</span></span><br><span class="line">            System.out.println(<span class="string">"老师给予评价："</span>);<span class="comment">// 循环操作</span></span><br><span class="line">            answer = input.next().charAt(<span class="number">0</span>);<span class="comment">// 迭代部分  控制台录入</span></span><br><span class="line">        &#125;<span class="keyword">while</span>(answer != <span class="string">'y'</span>);<span class="comment">// 循环条件 写到后面，注意要加分号 当评价不是y则返回重新循环（重写）</span></span><br><span class="line">        System.out.println(<span class="string">"恭喜通过"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程：</p>
<ul>
<li>先执行一次循环操作之后，再进行布尔表达式的判断。</li>
<li>如果结果为true，则再次执行循环操作。</li>
<li>如果结果为false，才会退出循环结构，执行后续代码。</li>
</ul>
</li>
<li><p>do while <strong>特点</strong>：</p>
<ul>
<li><p>首次没有入口条件，<strong>先执行，再判断</strong>。</p>
</li>
<li><p>适用于<strong>循环次数不明确</strong>的场景</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用 do while 打印100遍 HelloWorld</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDoWhile</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">do</span>&#123;<span class="comment">//直接执行循环操作，首次没有入口条件</span></span><br><span class="line">        	System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i &lt;= <span class="number">100</span>);<span class="comment">//判断满足，则循环。不满足，则至少执行一次（执行次数共 0~n 次）</span></span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="循环的注意点"><a href="#循环的注意点" class="headerlink" title="循环的注意点"></a>循环的注意点</h3><ul>
<li><p>是否使用循环及使用步骤</p>
<ul>
<li><ol>
<li>明确是否需要使用循环</li>
<li>分析<strong>循环条件</strong>和<strong>循环操作</strong>是什么        操作：相加求和；条件：0~100</li>
<li>循环结构的<strong>选型</strong>，用哪个循环           <strong>循环次数是否明确、首次是否需要入口条件</strong></li>
</ol>
</li>
</ul>
</li>
<li><p>while 与 do while 的对比</p>
<ul>
<li><p>首次即有入口条件，先判断，再执行。适用于循环次数明确的场景。（ while ）</p>
</li>
<li><p>首次没有入口条件，先执行，再判断。适用于循环次数不明确的场景。（ do while ）</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-for-循环"><a href="#3-for-循环" class="headerlink" title="3. for 循环"></a>3. for 循环</h3><ul>
<li><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( 初始部分 ； 循环条件 ； 迭代部分 )&#123;</span><br><span class="line">	<span class="comment">//循环操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">// 1.初始部分   2.循环条件  4.迭代部分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">100</span> ; i++ )&#123;</span><br><span class="line">        	System.out.println(<span class="string">"HelloWorld"</span> + i);<span class="comment">// 3.循环操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">        <span class="comment">//for循环与while循环相同，首次判断不满足，则一次都不会执行。（执行次数 0~n 次）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程：</p>
<ul>
<li>首次执行初始部分（仅一次）。</li>
<li>对布尔表达式进行判断，结果为 true ，则执行逻辑代码。</li>
<li>本次执行完毕后，执行迭代部分，再次判断，结果仍旧为 true ，则再次执行逻辑代码。</li>
<li>直至布尔表达式的结果为 false 时，才会退出循环结构，执行后续代码。</li>
<li><strong>特点</strong>：首次即有入口条件，<strong>先判断、再执行</strong>，适用于<strong>循环次数明确</strong>的情况。（与 while 相同）</li>
</ul>
</li>
</ul>
<h3 id="【扩展】-用-while-和-for-写死循环"><a href="#【扩展】-用-while-和-for-写死循环" class="headerlink" title="【扩展】 用 while 和 for 写死循环"></a>【扩展】 用 while 和 for 写死循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;<span class="comment">//true </span></span><br><span class="line">	<span class="comment">//死循环</span></span><br><span class="line">    System.out.println(<span class="string">"while..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (;;)&#123;</span><br><span class="line">	<span class="comment">//死循环</span></span><br><span class="line">    System.out.println(<span class="string">"for..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
